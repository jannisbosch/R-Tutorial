---
title: "Einführung in R"
author: "Jannis Bosch"
format: 
  revealjs:
    theme: moon
    embed-resources: true
execute:
  echo: true
---

# Welche Programme benötigen wir?

## R

- R ist eine Programmiersprache, die vor allem im Bereich der Statistik verwendet wird

- die Kernprogrammiersprache (core R) wird durch verschiedenste Bibliotheken, Erweiterungen und Weiterentwicklungen verfeinert

- R ist open source und freie Software

## RStudio

- RStudio ist eine Entwicklungsumgebung für R

- RStudio stellt die Nutzer:innenoberfläche und beinhaltet Tools wie einen Viewer, Code-highlighting und vieles mehr

## RStudio

![Übersicht](grafiken/overview RStudio.png)

# R Workflow

## R Projekte

- Wenn ihr ein neues Projekt in R angeht, erstellt ein R-Projekt in einem neuen Ordner (File -> New Project)

- Damit habt ihr den Arbeitspfad als Ausgangspunkt festgelegt und könnt alle Pfadangaben *relativ* zum Ausgangspunkt festlegen

- Ihr habt außerdem die Möglichkeit eure Arbeitsumgebung für die nächste Session zu speichern

## R Skripte

- Erstellt jetzt in eurem Projektordner ein R-Skript und öffnet es

- R-Skripte sind letztendlich einfach Textdateien, die euren Code enthalten

- Ihr könnt entweder den kompletten Code zusammen ausführen oder einzelne Zeilen/Abschnitte

## Die R Konsole

- In der Konsole könnt ihr Code ausführen, den ihr nicht für später speichern möchtet

- Die Ausgabe wird dann ebenfalls in der Konsole angezeigt

- Wenn ihr den Code eines Skripts ausführt, dann findet ihr die Ausgaben ebenfalls in der Konsole

## Die aRbeitsumgebung

- Wenn ihr Daten in Variablen speichert, könnt ihr diese danach in der Arbeitsumgebung sehen

- Aktuell sollte eure Arbeitsumgebung noch leer sein

# R-Code

## R-Code kommentieren

``` {r}
# Mit dem Raute-Zeichen (#) werden Kommentarzeilen markiert
# Der Text in Kommentarzeilen dient nur als 
# Anmerkung und wird von R nicht ausgefuehrt

# Es ist meist hilfreich seinen eigenen Code zu kommentieren, 
# damit man ihn auch später noch versteht
```

## Einfache Berechnungen

- Die Zeilen in der Box sind der Code, dazwischen findet ihr die jeweilige Ausgabe

```{r}
# Die Grundrechenarten in R: 
# Addition + 
# Subtraktion - 
# Multiplikation * 
# Division /

(3*3-6)/3+10441 

3*3-6/3+10441
# R berechnet Punkt- vor Strichrechnung
```

- Rechts oben in jeder Box findet ihr einen Button, der den Code kopiert

## Ein kurzer Hinweis für dieses Tutorial

- Übertragt die Inhalte jeder Box dieses Tutorials in euer geöffnetes Skript 

- Führt den Inhalt jedes Skripts einzeln aus (Strg + Enter bzw. Strg + R) und versucht dabei jeweils darauf zu achten wie sich die Variablen in der Arbeitsumgebung verändern

- Dabei wird jeweils die komplette Zeile, in der sich der Cursor befindet, ausgeführt (oder der markierte Text)

- Falls ihr eine Fehlermeldung ausgespuckt bekommt, sagt einfach bescheid!


## Variablen deklarieren

- Um die Arbeitsumgebung zu füllen, deklarieren wir jetzt ein paar Variablen

```{r}
# Um das Ergebnis einer Berechnung zu speichern, kann es in einer Variable festgehalten werden
# Es gibt zwei Wege einer Variable einen Wert zuzuweisen:
Nummer <- 3
Nummer = 3
# = und <- haben in diesem Fall die gleiche Funktion


# Um das Ergebnis spaeter aufzurufen, muss lediglich der Variablenname ausgefuehrt werden
# In der Konsole wird dann der Befehl erneut angezeigt, gefolgt vom Wert der Variable
Nummer
```

## Variablen deklarieren

- Groß- und Kleinschreibung unbedingt beachten!

```{r}
Nummer <- 3
NuMmEr <- 4

Nummer
NuMmEr
```

## Variablenklassen

- Daten und Variablen können unterschiedliche Klassen haben

```{r}
Number <- 3

Character <- "Hallo"

Logical <- TRUE
Logical <- T
# Dies sind fuers Erste die wichtigsten Variablenklassen

# Wenn ich den selben Variablennamen zweimal verwende, 
# wird der erste Wert ueberschrieben
Logical <- FALSE

Logical
```

##
- Fuer Interessierte: Mehr Informationen zu Datentypen gibt es hier (Kapitel 3.6 fuer dataframes): </br>
[Advanced R - Vectors](https://adv-r.hadley.nz/vectors-chap.html){target="_blank"}

# R-Funktionen

## R-Funktionen

- R-Funktionen werden durch runde Klammern gekennzeichnet

- Funktionen können unterschiedlich viele Eingabe- und Ausgabeargumente haben

- Die Funktion *mean()* berechnet z.B. den Mittelwert aus einer Reihe numerischer Daten

- Mit einem ? vor dem Funktionsnamen könnt ihr mehr über die jeweilige Funktion erfahren 

```{r}
#| eval: false
?mean
```

## Werte zu Vektoren kombinieren

```{r}
# Variablen koennen auch mehr als einen Wert beinhalten 
# (Datenreihen / Arrays / Vektoren und Matrizen)
# Mithilfe der combine Funktion c() können mehrere Werte zu einem Vektor verbunden werden

MyVector <- c(1,2,3)
MyVector

# Mit der mean() Funktion kann man dann z.B. den Mittelwert berechnen
mean(MyVector)
```

## Mehrere Eingabeargumente

```{r}
mean(MyVector)
# In diesem Fall ist das Eingabeargument eine Datenreihe (1,2,3) 
# und das Ausgabeargument der zugehörige Mittelwert

MyNewVector <- c(1,2,3,NA)
# Bei NA-Werten funktioniert die mean-Funktion nicht
mean(MyNewVector)

# Ein zweites Eingabeargument schafft Abhilfe
mean(x = MyNewVector, na.rm = T)
```

## Ergebnisse speichern

```{r}
# Auch die Ergebnisse von Funktionen koennen in einer Variable gespeichert werden
MeanMyVector <- mean(MyVector)

# Ergebnis aufrufen
MeanMyVector
```

## Matrizen erstellen

```{r}
MyVector
# Zeilen (rows) verbinden
MyMatrix <- rbind(MyVector, MyVector, MyVector)
MyMatrix

# Spalten (columns) verbinden
MyMatrix <- cbind(c(1,0,0), c(0,1,0), c(0,1,0))
MyMatrix

# Wenn ihr MyMatrix in der Arbeitsumgebung anklickt,
# zeigt R euch auch eure Datenmatrix
```

## Variablenklassen I

```{r}
# Die Klasse einer Variable herausfinden:
# Die class() Funktion 
Number <- 3
class(Number)

# Auch das Ergebnis dieser Funktion kann ich in einer neuen Variable speichern
ClassOfNumber <- class(Number)

# Und was hat das Ergebnis für eine Klasse? 
class(ClassOfNumber)

# Auch dieses Ergebnis könnte ihr wieder in einer Variable speichern
ClassOfClassOfNumber <- class(ClassOfNumber)
ClassOfClassOfNumber
```

## Weitere Funktionen

``` {r}
mean(MyVector)
min(MyVector)
max(MyVector)
sd(MyVector)
summary(MyVector)
length(MyVector)

# Schaut mal in die Hilfeseiten für diese Funktionen hinein (?Funktionsname)
```

# Rechnen mit R

## Rechnen und speichern
``` {r}
# Ich kann auch etwas auf einen Variablenwert aufaddieren und dies in der selben Variable speichern
# (der alte Wert ist dann aber geloescht)
Number
Number <- Number + 8
Number
```

## Rechnen mit character-Variablen
``` {r}
#| error: true
# Anführungszeichen markieren für R eine character-Variable
Number <- "3"

# Das geht nicht
Number <- Number + 8
class(Number)

# Die Funktion as.numeric() wandelt eine andere Variablenklasse in einen numerischen Wert um
Number <- as.numeric(Number)
class(Number)

# Jetzt geht es wieder
Number <- Number + 8
Number

# Es muss aber eine moegliche Umformung sein
as.numeric("a")
```

## Rechnen mit Matrizen

```{r}
# Matrizenrechnung ist auch moeglich
MyMatrix
MyMatrix - 1 

# Ich kann alle Berechnungen in einer neuen Variable speichern
MyNewMatrix <- MyMatrix + 3
MyNewMatrix
```

## Dataframes

```{r}
MyNewMatrix
class(MyNewMatrix)

# Wenn man mit (Forschungs-)Datensaetzen arbeitet, bietet es sich meistens an diese als dataframe 
# zu speichern, da bei der Matrix-Klasse alle Werte die gleiche Datenklasse haben muessen
MyNewMatrix <- data.frame(MyNewMatrix)
class(MyNewMatrix)

# Bei dataframes kann jede Spalte eine eigene Datenklasse haben
```

## Dataframes erstellen

```{r}
# Hier erstellen wir einen dataframe mit drei Spalten: x, y und z
# Spalte x hat die Klasse numeric (bedeutet 1 bis 3)
# Spalte y hat die Klasse character
# Spalte z hat die Klasse logical
my_df <- data.frame(
  x = 1:3,
  y = c("a", "b", "c"),
  z = c(T,F,F)
)

my_df
```

## Data.frames erstellen

```{r}
# Alternativ ginge es auch so:
x <- 1:3
y <- c("a", "b", "c")
z <- c(T,F,F)

my_df <- data.frame(x,y,z)
my_df
```

## Arbeiten mit data.frames

```{r}
# Mit eckigen Klammern kann ich auch spezifische Elemente eines dataframes adressieren
# Zeilen und Spalten werden dabei mit einem Komma getrennt: [Zeile, Spalte]
# Die Zeilen und Spalten sind dafuer durchnummeriert
my_df[1,2]

# Wenn ich einen der Werte leer lasse, bekomme ich die komplette Zeile oder Spalte ausgegeben
my_df[1,]
my_df[,2]
```

## Arbeiten mit data.frames

```{r}
# Wenn Spalten und/oder Zeilen benannt sind, können auch die Namen verwendet werden
# Wir haben die Spalten mit x, y und z benannt, die Zeilen haben keine Namen
my_df[1,"x"]

# Wenn man mehrere Zeilen oder Spalten auf einmal aufrufen möchte, muss
# man wieder die combine-Funktion verwenden
my_df[c(1,2), c("x","y")]

# Um benannte Spalten einzeln aufzurufen, gibt es noch den $ Operator
my_df$x
# entspricht:
my_df[,"x"]
```

## Arbeiten mit data.frames

```{r}
#| warning: true
# Hier kriegen wir einen Warnhinweis:
mean(my_df)

# Aber wenn wir nur die numerische Spalte verwenden, funktioniert es:
mean(my_df[,"x"])

# Was könnte der Wert bei logischen Daten bedeuten?
mean(my_df[,"z"])
```

# Übungsaufgaben

## Datensatz

```{r}
# Jetzt erstellen wir einen Übungsdatensatz:
names <- c("Robert", "Christian", "Nancy", "Annalena", "Marco", "Hubertus", "Boris", "Cem", "Lisa", "Karl", "Volker", "Steffi", "Bettina", "Svenja", "Klara", "Wolfgang")
gender = factor(c("m", "m", "w", "w", "m", "m", "m", "m", "w", "m", "m", "w", "w", "w", "w", "m"))
age = c(54, 44, 53, 43, 46, 51, 63, 58, 55, 60, 53, 55, 55, 55, 47, 53)

# Die IQ-Werte werden anhand einer Normalverteilung zufällig generiert
# Indem wir den seed festlegen, bekommen wir alle die gleichen Zufallszahlen
set.seed(3425)
iq = rnorm(16, mean = 100, sd = 15)

# Jetzt erstellen wir den data.frame
sample_data <- data.frame(names,gender,age,iq)

```

## Die Aufgaben

1. Berechnet das Durchschnittsalter und den Durchschnitts-IQ für unseren Datensatz
2. Die table()-Funktion hilft Häufigkeiten auszuzählen. Zählt die Anzahl der männlichen und weiblichen Personen aus. Schaut euch, wenn nötig, die Hilfeseite der table()-Funktion.

## Die Lösung

```{r}
#| echo: false

mean(sample_data[,"age"])
mean(sample_data[,"iq"])

table(sample_data[,"gender"])

```

# Bibliotheken / Packages

## Bibliotheken / Packages

- Bibliotheken sind Sammlungen von R-Funktionen, Datensätzen und Code, die die Funktionalität von base R erweitern 

- Bibliotheken müssen zunächst pro System einmal installiert werden

- Anschließend können sie geladen und dann genutzt werden

## Beispielbibliothek: psych

- Die psych-Bibliothek beinhaltet verschiedenste Funktionen für die Datenauswertung, Ausreißeranalyse und zur Test- und Fragebogenkonstruktion (Faktorenanalyse, Cronbach's Alpha, etc.)

```{r}
#| eval: false
# Bei der ersten Nutzung muss die Bibliothek zunächst installiert werden:
install.packages("psych")

# Um die Bibliothek zu nutzen, muss sie dann in jeder R-Instanz neu geladen werden
library(psych)
```

- Unter <https://personality-project.org/r/psych/> kann man weitere Informationen zur psych-Bibliothek finden

## Beispielbibliothek: psych

```{r}
#| echo: false
#| output: false
library(psych)
```

```{r}
# Die describe-Funktion bietet einen Überblick über verschiedene Kennwerte der Variablen des Datensatzes
describe(sample_data)

# Die violin-Funktion erstellt Violin-plots
violin(age ~ gender, data = sample_data)
```

# Itemanalyse nach KTT mit der psych-Bibliothek

## Datenfile runterladen

</br>
</br>
[Hier klicken um den Datensatz runterzuladen](dateien/Daten Fragebogen.csv){target="_blank"}

## Einen Datensatz laden

```{r}
# Durch das R-Projekt weiß in welchem Ordner es nach der Datei suchen muss
# Mit der read()-Funktion können wir einen Datensatz aus einer csv-Datei einlesen
fb_data <- read.csv2(file.path("dateien", "Daten Fragebogen.csv"))

# Alternativ kann man den Datensatz auch direkt aus dem Internet importieren:
fb_data <- read.csv2(file.path("https://jannisbosch.github.io/R-Tutorial/dateien/Daten%20Fragebogen.csv"))

# Die head()-Funktion ermöglicht uns einen Überblick über die Variablen im Datensatz
head(fb_data)

# Was beinhaltet der Datensatz?
```

## Die Skalen

[Hier klicken um die Skalen runterzuladen](dateien/Skalen SPQ.pdf){target="_blank"}

<iframe src="dateien/Skalen SPQ.pdf" height="500" width="500"></iframe>

## Die Itemanalyse (nach klassischer Testtheorie)

```{r}
# Berechnung der Skala Odd Believes & Magical Thinking - Items 3, 12, 21, 30, 39, 47, 55

# Zunächst schauen wir uns mit Hilfe der alpha()-Funktion aus der psych-Bibliothek 
# das Cronbach's Alpha und weitere Parameter für die Itemanalyse an
alpha(fb_data[,c("spq3", "spq12", "spq21", "spq30", "spq39", "spq47", "spq55")])
```

## Einen Skalenmittelwert berechnen

```{r}
# Die rowMeans()-Funktion berechnet zeilenweise den Mittelwert für den Datensatz im Eingabeargument
# Diese Datenreihe von Mittelwerten wird dann als neue Spalte OBMT in unserem Datensatz gespeichert
fb_data[,"OBMT"] <- rowMeans(fb_data[,c("spq3", "spq12", "spq21", "spq30", "spq39", "spq47", "spq55")], na.rm = T)

fb_data[,"OBMT"]
```

## Übungsaufgabe

1. Berechnet das Cronbach's Alpha für die Excessive Social Anxiety Skala

2. Berechnet den *Skalen*mittelwert der Excessive Social Anxiety Skala für jede einzelne Person

3. Berechnet den *Stichproben*mittelwert für die Excessive Social Anxiety Skala

## Lösung 1

```{r}
alpha(fb_data[,c("spq2", "spq11", "spq20", "spq29", "spq38", "spq46", "spq54", "spq71")])
```

## Lösung 2

```{r}
fb_data[,"ESA"] <- rowMeans(fb_data[,c("spq2", "spq11", "spq20", "spq29", "spq38", "spq46", "spq54", "spq71")], na.rm = T)

fb_data[,"ESA"]
```

## Lösung 3

```{r}
mean(fb_data[,"ESA"])
```
